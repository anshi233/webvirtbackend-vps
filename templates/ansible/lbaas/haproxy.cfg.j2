global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin group prometheus
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Maxconn
        maxconn 4096

        # CPU affinity
        nbthread 2

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

{% for rule in forwarding_rules %}
{% if rule.entry_protocol == 'http' %}
frontend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        bind {{ ipv4_public_address }}:{{ rule.entry_port }}
        {% if http_redirect_https %}
        redirect scheme https code 301 if !{ ssl_fc }
        {% endif %}
        default_backend {{ rule.entry_protocol }}_{{ rule.entry_port }}

backend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        balance roundrobin
        {% if sticky_sessions %}
        cookie {{ sticky_sessions.cookie_name }} insert indirect nocache maxidle {{ sticky_sessions.cookie_ttl }}
        {% endif %}
        {% for virtance in virtances %}
        server virtance_{{ virtance.id }} {{ virtance.ipaddr }}:{{ rule.target_port }} {% if sticky_sessions %}cookie S1{% endif %} check {{ health.check_protocol }} 
        {% endfor %}
        check port {{ health.check_port }} 
        check inter {{ health.check_interval_seconds }}s
        check fastinter {{ health.check_interval_seconds }}s
        check downinter {{ health.check_unhealthy_threshold }}s
        check rise {{ health.check_healthy_threshold }}
        check fall {{ health.check_unhealthy_threshold }}
        check timeout {{ health.check_timeout_seconds }}s
        http-check send meth GET uri {{ health.check_path }} ver HTTP/1.1
{% elif rule.entry_protocol == 'https' %}
frontend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        bind {{ ipv4_public_address }}:{{ rule.entry_port }} ssl crt /etc/haproxy/ssl/cert.pem
        default_backend {{ rule.entry_protocol }}_{{ rule.entry_port }}

backend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        balance roundrobin
        {% if sticky_sessions %}
        cookie {{ sticky_sessions.cookie_name }} insert indirect nocache maxidle {{ sticky_sessions.cookie_ttl }}
        {% endif %}
        {% for virtance in virtances %}
        server virtance_{{ virtance.id }} {{ virtance.ipaddr }}:{{ rule.target_port }} {% if sticky_sessions %}cookie S1{% endif %} check {{ health.check_protocol }} 
        {% endfor %}
        check port {{ health.check_port }} 
        check inter {{ health.check_interval_seconds }}s
        check fastinter {{ health.check_interval_seconds }}s
        check downinter {{ health.check_unhealthy_threshold }}s
        check rise {{ health.check_healthy_threshold }}
        check fall {{ health.check_unhealthy_threshold }}
        check timeout {{ health.check_timeout_seconds }}s
{% elif rule.entry_protocol == 'tcp' %}
frontend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        bind {{ ipv4_public_address }}:{{ rule.entry_port }}
        default_backend {{ rule.entry_protocol }}_{{ rule.entry_port }}

backend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        balance roundrobin
        {% for virtance in virtances %}
        server virtance_{{ virtance.id }} {{ virtance.ipaddr }}:{{ rule.target_port }} check
        {% endfor %}
        check port {{ health.check_port }} 
        check inter {{ health.check_interval_seconds }}s
        check fastinter {{ health.check_interval_seconds }}s
        check downinter {{ health.check_unhealthy_threshold }}s
        check rise {{ health.check_healthy_threshold }}
        check fall {{ health.check_unhealthy_threshold }}
        check timeout {{ health.check_timeout_seconds }}s
{% elif rule.entry_protocol == 'udp' %}
frontend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        bind {{ ipv4_public_address }}:{{ rule.entry_port }}
        default_backend {{ rule.entry_protocol }}_{{ rule.entry_port }}

backend {{ rule.entry_protocol }}_{{ rule.entry_port }}
        balance roundrobin
        {% for virtance in virtances %}
        server virtance_{{ virtance.id }} {{ virtance.ipaddr }}:{{ rule.target_port }} check
        {% endfor %}
        check port {{ health.check_port }} 
        check inter {{ health.check_interval_seconds }}s
        check fastinter {{ health.check_interval_seconds }}s
        check downinter {{ health.check_unhealthy_threshold }}s
        check rise {{ health.check_healthy_threshold }}
        check fall {{ health.check_unhealthy_threshold }}
        check timeout {{ health.check_timeout_seconds }}s
{% endif %}
{% endfor %}